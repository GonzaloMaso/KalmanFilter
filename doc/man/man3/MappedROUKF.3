.TH "MappedROUKF" 3 "Fri Mar 23 2018" "Version 1.0" "A Kalman Library (AKL)" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MappedROUKF
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MappedROUKF\&.h>\fP
.PP
Inherits \fBAbstractROUKF\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBMAPPING_TYPE\fP { \fBDEFAULT\fP, \fBPOSITIVE\fP, \fBRANGED\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMappedROUKF\fP (int \fBnObservations\fP, int \fBnStates\fP, int \fBnParameters\fP, vector< double > observationsUncertainty, vector< double > parametersUncertainty, \fBSigmaPointsGenerator::SIGMA_DISTRIBUTION\fP sigmaDistribution)"
.br
.ti -1c
.RI "\fBMappedROUKF\fP (int \fBnObservations\fP, int \fBnStates\fP, int \fBnParameters\fP, vector< double > observationsUncertainty, vector< double > parametersUncertainty, \fBSigmaPointsGenerator::SIGMA_DISTRIBUTION\fP sigmaDistribution, \fBMappedROUKF::MAPPING_TYPE\fP mappingType, vector< double > mappingParameters)"
.br
.ti -1c
.RI "\fBMappedROUKF\fP (int \fBnObservations\fP, int \fBnStates\fP, int \fBnParameters\fP, vector< double > observationsUncertainty, vector< double > parametersUncertainty, \fBSigmaPointsGenerator::SIGMA_DISTRIBUTION\fP sigmaDistribution, \fBCompositeParameterMapper\fP *\fBmapper\fP)"
.br
.ti -1c
.RI "\fB~MappedROUKF\fP ()"
.br
.ti -1c
.RI "double \fBexecuteStep\fP (vector< double > Zkhatc, forwardOp A, observationOp H)"
.br
.ti -1c
.RI "double \fBexecuteStepParallel\fP (vector< double > Zkhatc, forwardOp A, observationOp H, int seed, MPI_Comm local_comm, MPI_Comm masters_comm)"
.br
.ti -1c
.RI "void \fBreset\fP (int \fBnObservations\fP, int \fBnStates\fP, int \fBnParameters\fP, vector< double > observationsUncertainty, vector< double > parametersUncertainty, \fBSigmaPointsGenerator::SIGMA_DISTRIBUTION\fP sigmaDistribution)"
.br
.ti -1c
.RI "void \fBreplaceMapper\fP (\fBCompositeParameterMapper\fP *\fBmapper\fP)"
.br
.ti -1c
.RI "virtual void \fBgetParameters\fP (double **ThetaC) override"
.br
.ti -1c
.RI "virtual void \fBsetParameters\fP (double *ThetaC) override"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCompositeParameterMapper\fP * \fBmapper\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
An example for the usage of the library:
.PP
.PP
.nf
   int (*ptA)(double*, int) = NULL;
void (*ptH)(double*, int, double*, int) = NULL;
ptA = &forwardOpElasticity;
ptH = &observerOpElasticity;

 //    Initialization parameters
for (int i = 0; i < nParameters; i++) {
   initialGuess[i] = 2\&.5E5;            // -> X0
   parametersUncertainties[i] =1E8;    // -> U0^{-1}
}
ROUKF *kalmanInstance = new ROUKF(nStates, nParameters, statesUncertainties,
parametersUncertainties);

// Set initial condition
kalmanInstance->setState(initialGuess, nParameters);

for (int it = 0; it < 3000; it++) {
   error = kalmanInstance->executeStep(observation, nStates, ptA, ptH);
}

// Get the Kalman estimation
kalmanInstance->getState(&sol);            // -> XSol
.fi
.PP
 Class that implements the reduced order unscented Kalman filter\&. 
.PP
Definition at line 57 of file MappedROUKF\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBMappedROUKF::MAPPING_TYPE\fP"
Reparametrization type\&. 
.PP
Definition at line 64 of file MappedROUKF\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MappedROUKF::MappedROUKF (int nObservations, int nStates, int nParameters, vector< double > observationsUncertainty, vector< double > parametersUncertainty, \fBSigmaPointsGenerator::SIGMA_DISTRIBUTION\fP sigmaDistribution)"
Creates the covariance matrixes and sigma points associated with the extended vector X and their uncertainty\&. 
.PP
\fBParameters:\fP
.RS 4
\fInObservations\fP Quantity of observations\&. 
.br
\fInStates\fP Quantity of states\&. 
.br
\fInParameters\fP Quantity of parameters\&. 
.br
\fIobservationsUncertainty\fP Vector with the uncertainty of each state in X\&. 
.br
\fIparametersUncertainty\fP Vector with the uncertainty of each parameter in Theta\&. 
.br
\fIsigmaDistribution\fP Type of sigmas applied to assess the unscented transform\&. 
.RE
.PP

.PP
Definition at line 18 of file MappedROUKF\&.cpp\&.
.SS "MappedROUKF::MappedROUKF (int nObservations, int nStates, int nParameters, vector< double > observationsUncertainty, vector< double > parametersUncertainty, \fBSigmaPointsGenerator::SIGMA_DISTRIBUTION\fP sigmaDistribution, \fBMappedROUKF::MAPPING_TYPE\fP mappingType, vector< double > mappingParameters)"
Creates the covariance matrixes and sigma points associated with the extended vector X and their uncertainty\&. The chosen mapping is the same for all parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fInObservations\fP Quantity of observations\&. 
.br
\fInStates\fP Quantity of states\&. 
.br
\fInParameters\fP Quantity of parameters\&. 
.br
\fIobservationsUncertainty\fP Vector with the uncertainty of each state in X\&. 
.br
\fIparametersUncertainty\fP Vector with the uncertainty of each parameter in Theta\&. 
.br
\fIsigmaDistribution\fP Type of sigmas applied to assess the unscented transform\&. 
.br
\fImappingType\fP Type of mapping between the problem and the kalman parameters\&. 
.br
\fImappingParameters\fP Parameters for the chosen mapping type\&. 
.RE
.PP

.PP
Definition at line 52 of file MappedROUKF\&.cpp\&.
.SS "MappedROUKF::MappedROUKF (int nObservations, int nStates, int nParameters, vector< double > observationsUncertainty, vector< double > parametersUncertainty, \fBSigmaPointsGenerator::SIGMA_DISTRIBUTION\fP sigmaDistribution, \fBCompositeParameterMapper\fP * mapper)"
Creates the covariance matrixes and sigma points associated with the extended vector X and their uncertainty\&. The mapping between the problem and the kalman parameters is given by the user customized \fCmapper\fP mapping function\&. 
.PP
\fBParameters:\fP
.RS 4
\fInObservations\fP Quantity of observations\&. 
.br
\fInStates\fP Quantity of states\&. 
.br
\fInParameters\fP Quantity of parameters\&. 
.br
\fIobservationsUncertainty\fP Vector with the uncertainty of each state in X\&. 
.br
\fIparametersUncertainty\fP Vector with the uncertainty of each parameter in Theta\&. 
.br
\fIsigmaDistribution\fP Type of sigmas applied to assess the unscented transform\&. 
.br
\fImapper\fP User customized mapping function between the problem and the kalman parameters\&. 
.RE
.PP

.PP
Definition at line 99 of file MappedROUKF\&.cpp\&.
.SS "MappedROUKF::~MappedROUKF ()"
Void destructor\&. 
.PP
Definition at line 129 of file MappedROUKF\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "double MappedROUKF::executeStep (vector< double > Zkhatc, forwardOp A, observationOp H)"
Performs one step of the Kalman filtering process in serial execution of the sigma points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIZkhatc\fP Current observations estimations\&. 
.br
\fIA\fP Forward operator\&. 
.br
\fIH\fP Observation operator; 
.RE
.PP
\fBReturns:\fP
.RS 4
Current L2 norm of the errors across all observations\&. 
.RE
.PP

.PP
Definition at line 132 of file MappedROUKF\&.cpp\&.
.SS "double MappedROUKF::executeStepParallel (vector< double > Zkhatc, forwardOp A, observationOp H, int seed, MPI_Comm local_comm, MPI_Comm masters_comm)"
Performs one step of the Kalman filtering process with parallel execution of the sigma points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIZkhatc\fP Current observations estimations\&. 
.br
\fIA\fP Forward operator\&. 
.br
\fIH\fP Observation operator; 
.br
\fIseed\fP Sigma point ID for the current MPI process\&. 
.br
\fIlocal_comm\fP Communicator of all MPI processes that solve the sigma point \fCseed\fP\&. 
.br
\fImasters_comm\fP Communicator of the master MPI processes of each sigma point \fCseed\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Current L2 norm of the errors across all observations\&. 
.RE
.PP

.PP
Definition at line 203 of file MappedROUKF\&.cpp\&.
.SS "void MappedROUKF::getParameters (double ** ThetaC)\fC [override]\fP, \fC [virtual]\fP"
Return the current parameter estimatives in the array \fCThetaC\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIThetaC\fP Current parameter estimatives\&. 
.RE
.PP

.PP
Reimplemented from \fBAbstractROUKF\fP\&.
.PP
Definition at line 313 of file MappedROUKF\&.cpp\&.
.SS "void MappedROUKF::replaceMapper (\fBCompositeParameterMapper\fP * mapper)"
Replaces the current \fCmapper\fP for the new \fBCompositeParameterMapper\fP instance\&. 
.PP
\fBParameters:\fP
.RS 4
\fImapper\fP New mapper instance\&. 
.RE
.PP

.PP
Definition at line 326 of file MappedROUKF\&.cpp\&.
.SS "void MappedROUKF::reset (int nObservations, int nStates, int nParameters, vector< double > observationsUncertainty, vector< double > parametersUncertainty, \fBSigmaPointsGenerator::SIGMA_DISTRIBUTION\fP sigmaDistribution)"
Returns to the initial state of the kalman filter\&. Not fully tested 
.PP
\fBParameters:\fP
.RS 4
\fInObservations\fP Quantity of observations\&. 
.br
\fInStates\fP Quantity of states\&. 
.br
\fInParameters\fP Quantity of parameters\&. 
.br
\fIobservationsUncertainty\fP Vector with the uncertainty of each state in X\&. 
.br
\fIparametersUncertainty\fP Vector with the uncertainty of each parameter in Theta\&. 
.br
\fIsigmaDistribution\fP Type of sigmas applied to assess the unscented transform\&. 
.RE
.PP

.PP
Definition at line 286 of file MappedROUKF\&.cpp\&.
.SS "void MappedROUKF::setParameters (double * ThetaC)\fC [override]\fP, \fC [virtual]\fP"
Sets the initial parameter estimatives\&. 
.PP
\fBParameters:\fP
.RS 4
\fIThetaC\fP Initial parameter estimatives\&. 
.RE
.PP

.PP
Reimplemented from \fBAbstractROUKF\fP\&.
.PP
Definition at line 320 of file MappedROUKF\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBCompositeParameterMapper\fP* MappedROUKF::mapper\fC [private]\fP"
Mapping function between the problem parameters and the kalman parameters\&. 
.PP
Definition at line 60 of file MappedROUKF\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for A Kalman Library (AKL) from the source code\&.
